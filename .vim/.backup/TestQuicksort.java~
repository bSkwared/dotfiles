import java.util.Random;
import java.util.Arrays;

class TestQuicksort {

    public static void main(String[] args) {

        final int NUM_ITERS   =    10;
        final int NUM_SIZE    = 10000;
        final int MAX_NUM     = 10000;
        final int MAX_THREADS =    10;


        int[] testData   = new int[NUM_SIZE];
        int[] sortedData = new int[NUM_SIZE];

        int[] seqTest = new int[NUM_SIZE];
        int[] partitionTest = new int[NUM_SIZE];
        int[] executorTest = new int[NUM_SIZE];

        boolean hasBadSequential = false;
        boolean hasBadPartition  = false;
        boolean hasBadExecutor   = false;

        for (int iter = 0; iter < NUM_ITERS; ++iter) {

            // Get new random data
            fillRand(testData, MAX_NUM);
            sortedData = Arrays.copyOf(testData, NUM_SIZE);
            Arrays.sort(sortedData);


            // Test sequential
            // Copy new array
            seqTest = Arrays.copyOf(testData, NUM_SIZE);

            // Sort new array
            Quicksort sequential = new Quicksort(seqTest);
            sequential.sort();

            // Check results
            if (!Arrays.equals(sortedData, seqTest)) {
                hasBadSequential = true;
            }


            // Test 4-partition
            // Copy new array
            partitionTest = Arrays.copyOf(testData, NUM_SIZE);
            
            // Sort new array
            Quicksort partition  = new Quicksort(partitionTest);
            partition.parallelSort();

            // Check result
            if (!Arrays.equals(sortedData, partitionTest)) {
                hasBadPartition = true;
            }


            // Test Executor
            for (int numThreads = 1; numThreads <= MAX_THREADS; ++numThreads) {
                // Copy new array
                executorTest = Arrays.copyOf(testData, NUM_SIZE);

                // Sort new array
                Quicksort executor   = new Quicksort(executorTest);
                executor.executorSort(numThreads);

                // Check result
                if (!Arrays.equals(sortedData, executorTest)) {
                    hasBadExecutor = true;
                }
            }
        }
        

        // Print success/error messages
        if (hasBadSequential) {
            System.out.println("ERROR: sequential sort failed.");
        } else {
            System.out.println("SUCCESS: sequential sort succeeded.");
        }

        
        if (hasBadPartition) {
            System.out.println("ERROR: 4-partition sort failed.");
        } else {
            System.out.println("SUCCESS: 4-partition sort succeeded.");
        }

        
        if (hasBadExecutor) {
            System.out.println("ERROR: executor sort failed.");
        } else {
            System.out.println("SUCCESS: executor sort succeeded.");
        }
    }


    private static void fillRand(int[] arr, final int MAX) {
        Random rand = new Random();

        for (int i = 0; i < arr.length; ++i) {
            arr[i] = rand.nextInt(MAX);
        }
    }
}

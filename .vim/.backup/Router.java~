public class Router extends Thread {
  // do not modify!
  private int myId = -1;
  private int[][] myDistanceVectorTable = new int[4][4]; //hardcoding 4 routers
  private boolean[] myNeighbors = new boolean[4]; // again hardcoding 4 routers 
  private NetworkSimulator network;
  private int packetNumber = 0;
  // feel free to add other private variables if you need them...

  private static final int INFINITY = 999; // Value to represent non-existent connections
  private int[] myDV; // My row in my dv table
  private int numNodes; // Number of nodes in network
  
  // do not modify!
  // these values are assigned by Project.java when each of the 4 routers are constructed
  public Router(NetworkSimulator net, int id, int[] distanceToNeighbors) {
    network = net;
    myId = id;
    initArrays(distanceToNeighbors);
  }
  
  // do not modify!
  // note: the run method is called automatically when the threads are started
  // in Project.java -- you will never invoke this method
  public void run() {
    sendUpdate();
  }
  
  // this is called only once (by the constructor)
  // this method is responsible for initializing myDistanceVectorTable[]
  // and myNeighbors[] with the appropriate values
  // note: a distance of 999 is the convention being used to represent "infinity"
  // note: do not call sendUpdate from this method -- the first updates will be sent
  //       by run() when the thread is started
  private void initArrays(int[] distanceToNeighbors) {
    
    // Get my row of distances out of table
    myDV = myDistanceVectorTable[myId];


    // Initialize everyones values to infinity
    numNodes = myDistanceVectorTable.length;

    for (int i = 0; i < numNodes; ++i) {
      for (int j = 0; j < numNodes; ++j) {
        myDistanceVectorTable[i][j] = INFINITY;
      }
    }


    // Fill in my row of the table
    for (int i = 0; i < numNodes; ++i) {
      int distToi = distanceToNeighbors[i];
      myDV[i] = distToi;
      
      // Update neighbor list if they are my neighbor
      if (distToi != INFINITY) {
        myNeighbors[i] = true;
      }
    }


    // Do not send updates to myself
    myNeighbors[myId] = false;
  }
  
  // this is called by NewtorkSimulator when new data arrives
  // this is where the DV algorithm will be implemented to update the myDistanceVectorTable[]
  // as new information arrives
  public void update(Packet p) {

    int updatedNeighbor = p.getSource(); // Which neighbor was updated
    int[] theirDists = p.getMinCosts();  // Their new DV


    // Update their row in my distance vector table
    int[] theirRowMyTable = myDistanceVectorTable[updatedNeighbor];
    for (int i = 0; i < theirDists.length; ++i) {
      theirRowMyTable[i] = theirDists[i];
    }


    // Does anything in my row get modified
    boolean haveUpdate = false;

    // Distance to updated neighbor
    int distToNeighbor = myDV[updatedNeighbor];

    // See if I can get somewhere through this updated neighbor
    for (int i = 0; i < numNodes; ++i) {

      // Relax distance to node i through node updatedNeighbor
      if (myDV[i] > distToNeighbor + theirDists[i]) {
        myDV[i] = distToNeighbor + theirDists[i];
        haveUpdate = true;
      }
    }


    // Tell my neighbors if my distance vector updates
    if (haveUpdate) {
        sendUpdate();
    }
  } 
  
  // do not modify!
  // called by update() when updates are required to be sent to neighbors
  private void sendUpdate() {
    for (int i = 0; i<4; i++) {
      if (myNeighbors[i]) {
        packetNumber++;
        Packet p = new Packet(packetNumber, myId, i, myDistanceVectorTable[myId]);
        network.send(p);
      }
    }
  }

  // do not modify!
  // NetworkSimulator uses this method to maintain logs
  public String auditDistanceVectorTable() {
    String s = "";
    for (int i=0; i<4; i++) {
      s += String.format("%d: %4d%4d%4d%4d%n", i, 
                        myDistanceVectorTable[i][0],
                        myDistanceVectorTable[i][1],
                        myDistanceVectorTable[i][2],
                        myDistanceVectorTable[i][3]);
    }
    return s;  
  }

}
